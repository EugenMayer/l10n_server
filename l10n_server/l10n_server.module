<?php
// $Id$

/**
 * @file
 *   Base localization server module.
 */

/**
 * Implementation of hook_menu().
 */
function l10n_server_menu() {
  $items = array();

  // Settings menu items.
  $items['admin/l10n_server'] = array(
    'title' => 'Localization server',
    'description' => 'Configuration options for the localization server.',
    'page callback' => 'l10n_server_settings_overview',
    'file' => 'l10n_server.admin.inc',
    'access arguments' => array('administer localization server'),
    'position' => 'right',
    'weight' => -5,
  );

  $items['admin/l10n_server/projects'] = array(
    'title' => 'Projects and releases',
    'description' => 'Manage projects and releases handled by the server.',
    'page callback' => 'l10n_server_admin_projects',
    'file' => 'l10n_server.admin.inc',
    'access arguments' => array('administer localization server'),
    'weight' => -8,
  );
  $items['admin/l10n_server/projects/overview'] = array(
    'title' => 'Overview',
    'access arguments' => array('administer localization server'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/l10n_server/projects/cleanup'] = array(
    'title' => 'Clean up',
    'page callback' => 'l10n_server_admin_projects_cleanup',
    'file' => 'l10n_server.admin.inc',
    'access arguments' => array('administer localization server'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/l10n_server/projects/delete/%l10n_server_project_admin'] = array(
    'title' => 'Delete project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('l10n_server_admin_projects_delete', 4),
    'file' => 'l10n_server.admin.inc',
    'access arguments' => array('administer localization server'),
    'type' => MENU_CALLBACK
  );
  $items['admin/l10n_server/projects/reset/%l10n_server_project_admin'] = array(
    'title' => 'Enable project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('l10n_server_admin_projects_reset', 4),
    'file' => 'l10n_server.admin.inc',
    'access arguments' => array('administer localization server'),
    'type' => MENU_CALLBACK
  );
  $items['admin/l10n_server/projects/releases/%l10n_server_project_admin'] = array(
    'title' => 'Releases',
    'page callback' => 'l10n_server_admin_releases',
    'page arguments' => array(4),
    'file' => 'l10n_server.admin.inc',
    'access arguments' => array('administer localization server'),
    'type' => MENU_CALLBACK
  );

  // Development helpers.
  if (module_exists('devel_generate')) {
    $items['admin/generate/languages'] = array(
      'title' => 'Generate languages',
      'description' => 'Generate a given number of languages.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('l10n_server_generate_languages_form'),
      'access arguments' => array('administer localization server'),
      'file' => 'l10n_server.devel.inc',
    );
    $items['admin/generate/translations'] = array(
      'title' => 'Generate translations and suggestions',
      'description' => 'Generate a given number of translations and suggestions.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('l10n_server_generate_translations_form'),
      'access arguments' => array('administer localization server'),
      'file' => 'l10n_server.devel.inc',
    );
  }

  return $items;
}

/**
 * Menu loader function for %l10n_server_project_admin to validate project URI.
 */
function l10n_server_project_admin_load($uri) {
  if (($projects = l10n_server_get_projects(array('all' => TRUE))) && isset($projects[$uri])) {
    return $uri;
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function l10n_server_perm() {
  return array(
    'administer localization server',
  );
}

/**
 * Implementation of hook_theme().
 */
function l10n_server_theme($existing, $type, $theme, $path) {
  return array(
    // l10n_server.admin.inc
    'l10n_server_admin_projects_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'l10n_server_admin_releases_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Provides a list of projects from the database, ordered by uri.
 *
 * @param $options
 *   Associative array of options
 *    - 'uri': Project URI, if requesting information about one project only.
 *      If not specified, information about all projects is returned.
 *    - 'pager': Number of projects to return a pager query result with. If
 *      NULL, no pager is used.
 *    - 'all': If not specified, unpublished projects are excluded (default).
 *      If TRUE, even unpublished projects are returned (for admin pages).
 * @return
 *   An associative array keyed with project uris.
 */
function l10n_server_get_projects($options = array()) {
  static $projects = array();

  // Consider returning all projects or just published ones.
  $published = (empty($options['all']) ? 'WHERE status = 1 ' : '');

  if (isset($options['pager'])) {
    // If a pager view was asked for, collect data independently.
    $results = pager_query('SELECT * FROM {l10n_community_project} '. $published .'ORDER BY uri', $options['pager'], 0, NULL);
    $pager_results = array();
    while ($project = db_fetch_object($results)) {
      $pager_results[$project->uri] = $project;
      // Save project information for later, if someone asks for it by uri.
      $projects[$project->uri] = $project;
    }
    return $pager_results;
  }
  else {
    if (isset($options['uri'])) {
      // A specific project was asked for.
      if (isset($projects[$options['uri']])) {
        // Can be served from the local cache.
        return $projects[$options['uri']];
      }
      // Not found in cache, so query and cache before returning.
      $result = db_query("SELECT * FROM {l10n_community_project} WHERE uri = '%s'", $options['uri']);
      if ($project = db_fetch_object($result)) {
        $projects[$options['uri']] = $project;
        return $project;
      }
    }
    else {
      // A list of *all* projects was asked for.
      $results = db_query('SELECT * FROM {l10n_community_project} '. $published .'ORDER BY uri');
      while ($project = db_fetch_object($results)) {
        $projects[$project->uri] = $project;
      }
      return $projects;
    }
  }
}

/**
 * Get all releases of a project.
 *
 * @param $uri
 *   Project code to look up releases for.
 * @param $parsed_only
 *   If TRUE, only releases which already have their tarballs downloaded and
 *   parsed for translatables are returned. Otherwise all releases recorded in
 *   the database are returned.
 * @return
 *   Array of release objects for project, keyed by release id.
 */
function l10n_server_get_releases($uri, $parsed_only = TRUE) {
  $releases = array();
  $query = "SELECT r.* FROM {l10n_community_release} r LEFT JOIN {l10n_community_project} p ON r.pid = p.pid WHERE p.uri = '%s' ";
  if ($parsed_only) {
    $query .= 'AND r.last_parsed > 0 ';
  }
  $query .= 'ORDER BY r.title';
  $result = db_query($query, $uri);
  while ($release = db_fetch_object($result)) {
    $releases[$release->rid] = $release;
  }
  return $releases;
}
